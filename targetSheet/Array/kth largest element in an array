class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if(nums.size()==0) return -1;
       
        // minheap O(nlogk)
        // priority_queue<int,vector<int>,greater<int> >minh;
        // int n=nums.size();
        // for(int i=0;i<n;i++)
        // {
        //     minh.push(nums[i]);
        //     if(minh.size() > k)
        //         minh.pop();
        // }
        // return minh.top();
        
        
        // max heap O(n+klogn)
        int n=nums.size();
        priority_queue<int> maxh;
        for(int i=0;i<n;i++) maxh.push(nums[i]);
        k=k-1;
        while(k--) maxh.pop();
        return maxh.top();
    }
};
