// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    void solve(int sr,int sc,vector<vector<int>> &m,int n,string paths,vector<string>&ans,bool visited[][6])
    {
        if(sr<0 or sc<0 or sr>=n or sc>=n or visited[sr][sc]==true or m[sr][sc]==0)
            return;
        if(sr==n-1 and sc==n-1)
        {
            ans.push_back(paths);
            return;
        }
        visited[sr][sc]=true;
        solve(sr-1,sc,m,n,paths+"U",ans,visited);
        solve(sr+1,sc,m,n,paths+"D",ans,visited);
        solve(sr,sc-1,m,n,paths+"L",ans,visited);
        solve(sr,sc+1,m,n,paths+"R",ans,visited);
        visited[sr][sc]=false;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        bool visited[6][6];
        memset(visited,false,sizeof(visited));
        vector<string>ans;
        string path="";
        solve(0,0,m,n,path,ans,visited);
        sort(ans.begin(),ans.end());
        return ans;
        
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends
